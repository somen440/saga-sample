// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// KitchenClient is the client API for Kitchen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KitchenClient interface {
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketReply, error)
	ApproveTicket(ctx context.Context, in *ApproveTicketRequest, opts ...grpc.CallOption) (*ApproveTicketReply, error)
	RejectTicket(ctx context.Context, in *RejectTicketRequest, opts ...grpc.CallOption) (*RejectTicketReply, error)
}

type kitchenClient struct {
	cc grpc.ClientConnInterface
}

func NewKitchenClient(cc grpc.ClientConnInterface) KitchenClient {
	return &kitchenClient{cc}
}

var kitchenCreateTicketStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateTicket",
}

func (c *kitchenClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketReply, error) {
	out := new(CreateTicketReply)
	err := c.cc.Invoke(ctx, "/proto.Kitchen/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var kitchenApproveTicketStreamDesc = &grpc.StreamDesc{
	StreamName: "ApproveTicket",
}

func (c *kitchenClient) ApproveTicket(ctx context.Context, in *ApproveTicketRequest, opts ...grpc.CallOption) (*ApproveTicketReply, error) {
	out := new(ApproveTicketReply)
	err := c.cc.Invoke(ctx, "/proto.Kitchen/ApproveTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var kitchenRejectTicketStreamDesc = &grpc.StreamDesc{
	StreamName: "RejectTicket",
}

func (c *kitchenClient) RejectTicket(ctx context.Context, in *RejectTicketRequest, opts ...grpc.CallOption) (*RejectTicketReply, error) {
	out := new(RejectTicketReply)
	err := c.cc.Invoke(ctx, "/proto.Kitchen/RejectTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KitchenService is the service API for Kitchen service.
// Fields should be assigned to their respective handler implementations only before
// RegisterKitchenService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type KitchenService struct {
	CreateTicket  func(context.Context, *CreateTicketRequest) (*CreateTicketReply, error)
	ApproveTicket func(context.Context, *ApproveTicketRequest) (*ApproveTicketReply, error)
	RejectTicket  func(context.Context, *RejectTicketRequest) (*RejectTicketReply, error)
}

func (s *KitchenService) createTicket(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/proto.Kitchen/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *KitchenService) approveTicket(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ApproveTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/proto.Kitchen/ApproveTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ApproveTicket(ctx, req.(*ApproveTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *KitchenService) rejectTicket(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.RejectTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/proto.Kitchen/RejectTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RejectTicket(ctx, req.(*RejectTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterKitchenService registers a service implementation with a gRPC server.
func RegisterKitchenService(s grpc.ServiceRegistrar, srv *KitchenService) {
	srvCopy := *srv
	if srvCopy.CreateTicket == nil {
		srvCopy.CreateTicket = func(context.Context, *CreateTicketRequest) (*CreateTicketReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
		}
	}
	if srvCopy.ApproveTicket == nil {
		srvCopy.ApproveTicket = func(context.Context, *ApproveTicketRequest) (*ApproveTicketReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method ApproveTicket not implemented")
		}
	}
	if srvCopy.RejectTicket == nil {
		srvCopy.RejectTicket = func(context.Context, *RejectTicketRequest) (*RejectTicketReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method RejectTicket not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "proto.Kitchen",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CreateTicket",
				Handler:    srvCopy.createTicket,
			},
			{
				MethodName: "ApproveTicket",
				Handler:    srvCopy.approveTicket,
			},
			{
				MethodName: "RejectTicket",
				Handler:    srvCopy.rejectTicket,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "kitchen.proto",
	}

	s.RegisterService(&sd, nil)
}
