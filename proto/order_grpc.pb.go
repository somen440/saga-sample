// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderReply, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderReply, error)
	ApproveOrder(ctx context.Context, in *ApproveOrderRequest, opts ...grpc.CallOption) (*ApproveOrderReply, error)
	RejectOrder(ctx context.Context, in *RejectOrderRequest, opts ...grpc.CallOption) (*RejectOrderReply, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

var orderGetOrderStreamDesc = &grpc.StreamDesc{
	StreamName: "GetOrder",
}

func (c *orderClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderReply, error) {
	out := new(GetOrderReply)
	err := c.cc.Invoke(ctx, "/proto.Order/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var orderCreateOrderStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateOrder",
}

func (c *orderClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderReply, error) {
	out := new(CreateOrderReply)
	err := c.cc.Invoke(ctx, "/proto.Order/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var orderApproveOrderStreamDesc = &grpc.StreamDesc{
	StreamName: "ApproveOrder",
}

func (c *orderClient) ApproveOrder(ctx context.Context, in *ApproveOrderRequest, opts ...grpc.CallOption) (*ApproveOrderReply, error) {
	out := new(ApproveOrderReply)
	err := c.cc.Invoke(ctx, "/proto.Order/ApproveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var orderRejectOrderStreamDesc = &grpc.StreamDesc{
	StreamName: "RejectOrder",
}

func (c *orderClient) RejectOrder(ctx context.Context, in *RejectOrderRequest, opts ...grpc.CallOption) (*RejectOrderReply, error) {
	out := new(RejectOrderReply)
	err := c.cc.Invoke(ctx, "/proto.Order/RejectOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderService is the service API for Order service.
// Fields should be assigned to their respective handler implementations only before
// RegisterOrderService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type OrderService struct {
	GetOrder     func(context.Context, *GetOrderRequest) (*GetOrderReply, error)
	CreateOrder  func(context.Context, *CreateOrderRequest) (*CreateOrderReply, error)
	ApproveOrder func(context.Context, *ApproveOrderRequest) (*ApproveOrderReply, error)
	RejectOrder  func(context.Context, *RejectOrderRequest) (*RejectOrderReply, error)
}

func (s *OrderService) getOrder(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/proto.Order/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *OrderService) createOrder(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/proto.Order/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *OrderService) approveOrder(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ApproveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/proto.Order/ApproveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ApproveOrder(ctx, req.(*ApproveOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *OrderService) rejectOrder(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.RejectOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/proto.Order/RejectOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RejectOrder(ctx, req.(*RejectOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterOrderService registers a service implementation with a gRPC server.
func RegisterOrderService(s grpc.ServiceRegistrar, srv *OrderService) {
	srvCopy := *srv
	if srvCopy.GetOrder == nil {
		srvCopy.GetOrder = func(context.Context, *GetOrderRequest) (*GetOrderReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
		}
	}
	if srvCopy.CreateOrder == nil {
		srvCopy.CreateOrder = func(context.Context, *CreateOrderRequest) (*CreateOrderReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
		}
	}
	if srvCopy.ApproveOrder == nil {
		srvCopy.ApproveOrder = func(context.Context, *ApproveOrderRequest) (*ApproveOrderReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method ApproveOrder not implemented")
		}
	}
	if srvCopy.RejectOrder == nil {
		srvCopy.RejectOrder = func(context.Context, *RejectOrderRequest) (*RejectOrderReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method RejectOrder not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "proto.Order",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetOrder",
				Handler:    srvCopy.getOrder,
			},
			{
				MethodName: "CreateOrder",
				Handler:    srvCopy.createOrder,
			},
			{
				MethodName: "ApproveOrder",
				Handler:    srvCopy.approveOrder,
			},
			{
				MethodName: "RejectOrder",
				Handler:    srvCopy.rejectOrder,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "order.proto",
	}

	s.RegisterService(&sd, nil)
}
